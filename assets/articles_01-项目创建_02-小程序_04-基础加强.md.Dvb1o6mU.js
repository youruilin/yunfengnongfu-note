import{_ as e,c as p,o as h,ag as l,j as s,a,t}from"./chunks/framework.JB0BnZq8.js";const r="/vitepress_init/assets/image-%E5%88%9B%E5%BB%BA%E7%BB%84%E4%BB%B6.dqPfdeV5.png",k="/vitepress_init/assets/image-%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F%E9%9A%94%E7%A6%BB.Dlyti-4M.png",d="/vitepress_init/assets/image-%E6%8F%92%E6%A7%BD.jh8rd826.png",E="/vitepress_init/assets/image-behaviors.Cv5-9qAk.png",D=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"articles/01-项目创建/02-小程序/04-基础加强.md","filePath":"articles/01-项目创建/02-小程序/04-基础加强.md","lastUpdated":1754559945000}'),o={name:"articles/01-项目创建/02-小程序/04-基础加强.md"},c={class:"details custom-block"},g={tabindex:"0"},b={tabindex:"0"};function u(n,i,y,m,F,v){return h(),p("div",null,[i[26]||(i[26]=l('<h2 id="自定义组件-目标" tabindex="-1">自定义组件-目标 <a class="header-anchor" href="#自定义组件-目标" aria-label="Permalink to &quot;自定义组件-目标&quot;">​</a></h2><p>① 能够创建并引用组件</p><ul><li>全局引用、局部引用usingComponents</li></ul><p>② 能够知道如何修改组件的样式隔离选项</p><ul><li>options -&gt; styleIsolation（ isolated, apply-shared, shared）</li></ul><p>③ 能够知道如何定义和使用数据监听器</p><ul><li>observers</li></ul><p>④ 能够知道如何定义和使用纯数据字段</p><ul><li>options -&gt; pureDataPattern</li></ul><p>⑤ 能够知道实现组件父子通信有哪 3种方式</p><ul><li>属性绑定、 事件绑定 、this.selectComponent(&#39; id 或class 选择器 &#39;)</li></ul><p>⑥ 能够知道如何定义和使用 behaviors</p><ul><li>调用 Behavior() 构</li></ul><h2 id="_1-组件的创建和使用" tabindex="-1">1. 组件的创建和使用 <a class="header-anchor" href="#_1-组件的创建和使用" aria-label="Permalink to &quot;1. 组件的创建和使用&quot;">​</a></h2><h3 id="_1-1-创建组件" tabindex="-1">1.1 创建组件 <a class="header-anchor" href="#_1-1-创建组件" aria-label="Permalink to &quot;1.1 创建组件&quot;">​</a></h3><p>① 在项目的根目录中，鼠标右键，创建 componentscomponents-&gt; test 文件夹</p><p>② 在新建的 components -&gt; test 文件夹上，鼠标右键，点击“ 新建 ComponentComponent”</p><p>③ 键入组件的名称之后回车，会自动生成组件对应的 4 个文件，后缀名分别为 .js js，.json json， .wxml 和 .wxss</p><p>注意：为了保证目录结构的清晰，建议把不同的组件，存放到单独目录中，例如：</p><figure><img src="'+r+`" alt=""><figcaption>image-20250726163830499</figcaption></figure><h3 id="_1-2-引用组件" tabindex="-1">1.2 引用组件 <a class="header-anchor" href="#_1-2-引用组件" aria-label="Permalink to &quot;1.2 引用组件&quot;">​</a></h3><p>组件的引用方式分为“ 局部引用 ”和 全局引用 ”：</p><ul><li><p>在页面的 <code>.json</code> 配置文件中引用组件的方式，叫做“局部引用”。示例代码如下：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在页面的 .json 文件中，引入组件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;usingComponents&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;my-test1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/components/test1/test1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 在页面的 .wxml 文件中，使用组件 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-test1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-test1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>在 app.json 全局配置文件中引用组件的方式，叫做“全局引用”：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 app.json 文件中, 引入组件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;pages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 省略不必要的代码 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;window&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 省略不必要的代码 */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;usingComponents&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;my-test2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/components/test2/test2&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 在页面的 .wxml 文件中, 使用组件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-test2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-test2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h3 id="_1-3-全局引用-vs-局部引用" tabindex="-1">1.3 全局引用 vs 局部引用 <a class="header-anchor" href="#_1-3-全局引用-vs-局部引用" aria-label="Permalink to &quot;1.3 全局引用 vs 局部引用&quot;">​</a></h3><p>根据组件的 使用频率 和范围 ，来选择合适的引用方式：</p><ul><li>如果某组件 在多个页面中经常被用到 ，建议进行“全局引用</li><li>如果某组件只 在特定的页面中被用到 ，建议进行“局部引用</li></ul><h3 id="_1-4-组件和页面的区别" tabindex="-1">1.4 组件和页面的区别 <a class="header-anchor" href="#_1-4-组件和页面的区别" aria-label="Permalink to &quot;1.4 组件和页面的区别&quot;">​</a></h3><p>从表面来看，组件和页面都是由 .js 、.json 、.wxml 和 .wxss 这四个文件组成的。但是，组件和页面的 .js 与 .json 文件有明显的不同：</p><ul><li>组件的 .json 文件中需要声明 &quot;component&quot;: true 属性</li><li>组件的 .js 文件中调用的是 Component() 函数</li><li>组件的事件处理函数需要定义到 methods 节点中</li></ul><h2 id="_2-样式" tabindex="-1">2. 样式 <a class="header-anchor" href="#_2-样式" aria-label="Permalink to &quot;2. 样式&quot;">​</a></h2><h3 id="_2-1-组件样式隔离" tabindex="-1">2.1 组件样式隔离 <a class="header-anchor" href="#_2-1-组件样式隔离" aria-label="Permalink to &quot;2.1 组件样式隔离&quot;">​</a></h3><p>默认情况下，自定义组件的样式只对当前组件生效，不会影响到组件之外的UI 结构，如图所示：</p><ul><li>组件 A 的样式 不会影响 组件 C 的样式</li><li>组件 A 的样式 不会影响 小程序页面的样式</li><li>小程序页面的样式 不会影响 组件 A 和 C 的样式</li></ul><figure><img src="`+k+`" alt=""><figcaption>image-20250726164741183</figcaption></figure><p>好处：① 防止外界的样式影响组件内部的样式；② 防止组件的样式破坏外界的样式</p><h3 id="_2-2-组件样式隔离的注意点" tabindex="-1">2.2 组件样式隔离的注意点 <a class="header-anchor" href="#_2-2-组件样式隔离的注意点" aria-label="Permalink to &quot;2.2 组件样式隔离的注意点&quot;">​</a></h3><ul><li>app.wxss 中的全局样式对组件无效</li><li>只有 class 选择器会有样式隔离效果， id 选择器、属性选择器、标签选择器不受样式隔离的影响</li></ul><p>建议：在组件和引用组件的页面中建议使用 class 选择器， 不要使用 id 、属性、标签选择器 ！</p><h3 id="_2-3-修改组件的样式隔离选项" tabindex="-1">2.3 修改组件的样式隔离选项 <a class="header-anchor" href="#_2-3-修改组件的样式隔离选项" aria-label="Permalink to &quot;2.3 修改组件的样式隔离选项&quot;">​</a></h3><p>默认情况下，自定义组件的样式隔离特性能够防止组件内外样式互相干扰的问题。但有时，我们希望在外界能 够控制组件内部的样式，此时，可以通过 styleIsolation 修改组件的样式隔离选项，用法如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在组件的 .js 文件中新增如下配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  options: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    styleIsolation: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;isolated&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或在组件的 .json 文件中新增如下配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;styleIsolation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;isolated&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_2-4-styleisolation-的可选值" tabindex="-1">2.4 styleIsolation 的可选值 <a class="header-anchor" href="#_2-4-styleisolation-的可选值" aria-label="Permalink to &quot;2.4 styleIsolation 的可选值&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:center;">可选值</th><th style="text-align:center;">组件样式对外部页面的影响</th><th style="text-align:center;">外部页面样式对组件的影响</th><th style="text-align:center;">典型使用场景</th></tr></thead><tbody><tr><td style="text-align:center;"><code>isolated（默认值）</code></td><td style="text-align:center;">不会影响</td><td style="text-align:center;">不会影响</td><td style="text-align:center;">需要严格隔离组件样式（默认值）</td></tr><tr><td style="text-align:center;"><code>apply-shared</code></td><td style="text-align:center;">不会影响</td><td style="text-align:center;">会穿透生效</td><td style="text-align:center;">外部页面需覆盖组件内部分样式</td></tr><tr><td style="text-align:center;"><code>shared</code></td><td style="text-align:center;">会穿透生效</td><td style="text-align:center;">会穿透生效</td><td style="text-align:center;">组件与外部页面共享全局样式</td></tr></tbody></table><h2 id="_3-数据、方法和属性" tabindex="-1">3. 数据、方法和属性 <a class="header-anchor" href="#_3-数据、方法和属性" aria-label="Permalink to &quot;3. 数据、方法和属性&quot;">​</a></h2><h3 id="data" tabindex="-1">data <a class="header-anchor" href="#data" aria-label="Permalink to &quot;data&quot;">​</a></h3><p>在小程序组件中，用于组件模板渲染的私有数据，需要定义到 data 节点中：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * 组件的初始数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="method" tabindex="-1">method <a class="header-anchor" href="#method" aria-label="Permalink to &quot;method&quot;">​</a></h3><p>在小程序组件中， 事件处理函数和自定义方法需要定义到 methods 节点中：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 组件的方法列表【包含事件处理函数和自定义方法】</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 事件处理函数</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ count: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.data.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_showCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过 this 直接调用自定义方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    _showCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自定义方法建议以 _ 开头</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      wx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">showToast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;count值为: &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.data.count,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        icon: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;none&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="properties" tabindex="-1">properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;properties&quot;">​</a></h3><p>在小程序组件中，properties 是组件的对外属性，用来接收外界传递到组件中的数据：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 属性定义</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  properties: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    max: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 完整定义属性的方式【当需要指定属性默认值时,建议使用此方式】</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      type: Number, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 属性值的数据类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      value: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 属性默认值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    max: Number </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 简化定义属性的方式【不需指定属性默认值时,可以使用简化方式】</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-test1</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-test1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="data-和-properties-的区别" tabindex="-1">data 和 properties 的区别 <a class="header-anchor" href="#data-和-properties-的区别" aria-label="Permalink to &quot;data 和 properties 的区别&quot;">​</a></h3><p>在小程序的组件中， properties 属性和 data 数据的用法相同，它们都是可读可写的，只不过：</p><ul><li>data 更倾向于 存储组件的私有数据</li><li>properties 更倾向于 存储外界传递到组件中的数据</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    showInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.data) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出结果: {count: 0, max: 10}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.properties) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出结果: {count: 0, max: 10}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 结果为 true,证明 data 数据和 properties 属性【在本质上是一样的、都是可读可写的】</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.properties)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="使用-setdata-修改-properties-的值" tabindex="-1">使用 setData 修改 properties 的值 <a class="header-anchor" href="#使用-setdata-修改-properties-的值" aria-label="Permalink to &quot;使用 setData 修改 properties 的值&quot;">​</a></h3><p>由于 data 数据 和 properties 属性 在本质上没有任何区别，因此 properties 属性的值也可以用于页面渲染， 或使用 setData 为 properties 中的属性重新赋值：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 在组件的 .wxml 文件中使用 properties 属性的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;max属性的值为: {{max}}&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  properties: { max: Number }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ max: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.properties.max </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 setData 修改属性的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,63)),s("details",c,[i[19]||(i[19]=s("summary",null,"也要看情况",-1)),i[20]||(i[20]=s("p",null,[a("因为**"),s("code",null,"properties"),a(" 定义的属性也会挂载到组件实例的 data 上**（表现得像是 data 的一部分），所以你可以用 "),s("code",null,"setData()"),a(" 来更新它，就像你更新 "),s("code",null,"data"),a(" 一样。")],-1)),i[21]||(i[21]=s("p",null,"但是：逻辑上效果是否生效，要看「绑定方式」",-1)),s("table",g,[i[5]||(i[5]=s("thead",null,[s("tr",null,[s("th",null,"使用方式"),s("th",null,[s("code",null,"setData({ max: ... })"),a(" 是否有效")]),s("th",null,"建议")])],-1)),s("tbody",null,[i[4]||(i[4]=s("tr",null,[s("td",null,"属性未绑定（写死或不传）"),s("td",null,"✅ 有效"),s("td",null,"可以直接改")],-1)),s("tr",null,[s("td",null,[i[0]||(i[0]=a("属性绑定（如 ",-1)),s("code",null,'max="'+t(n.value)+'"',1),i[1]||(i[1]=a("）",-1))]),i[2]||(i[2]=s("td",null,"❌ 无效，会被外部覆盖（可短暂修改）",-1)),i[3]||(i[3]=s("td",null,"触发事件通知父组件修改",-1))])])]),i[22]||(i[22]=l(`<p>🔧 举个例子：</p><p>父组件的 JS：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Page({</span></span>
<span class="line"><span>  data: {</span></span>
<span class="line"><span>    value: 5</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>父组件的 WXML：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;my-component max=&quot;{{value}}&quot; /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><p>🔍 这时候发生了什么？</p><ul><li><code>my-component</code> 的 <code>max</code> 属性值是 <strong>父组件的 <code>value</code></strong>。</li><li>所以 <code>max</code> 是**“受控属性”**。</li><li>在 <code>my-component</code> 内部用 <code>this.setData({ max: xxx })</code> 来修改，是不会真正生效的（或会被下一轮更新自动覆盖）。</li></ul><hr><p>✅ 不绑定的情况：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;my-component max=&quot;5&quot; /&gt;  &lt;!-- 字面值，字符串形式 --&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>或：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;my-component /&gt;  &lt;!-- 使用默认值 --&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这种情况下，<code>max</code> 没有被“动态绑定”，组件内部用 <code>setData({ max: ... })</code> 是有效的。</p>`,14)),s("p",null,[i[6]||(i[6]=a("但：当父组件中使用 ",-1)),s("code",null,'<my-component max="'+t(n.anyValue)+'" />',1),i[7]||(i[7]=a(" 时，组件内部 ",-1)),i[8]||(i[8]=s("code",null,"setData({ max: ... })",-1)),i[9]||(i[9]=a(" 虽然 ",-1)),i[10]||(i[10]=s("strong",null,"语法合法",-1)),i[11]||(i[11]=a("，但",-1)),i[12]||(i[12]=s("strong",null,"不会生效",-1)),i[13]||(i[13]=a("，因为：",-1))]),i[23]||(i[23]=s("ul",null,[s("li",null,[s("code",null,"max"),a(" 是由父组件"),s("strong",null,"绑定传入"),a("的（受控属性），在子组件里修改 "),s("code",null,"max"),a("，"),s("strong",null,"下一轮渲染时会被父组件的值重新覆盖"),a("。")]),s("li",null,"也就是说，页面上可能会短暂看到变化，但很快就又变回原值。")],-1)),i[24]||(i[24]=s("hr",null,null,-1)),i[25]||(i[25]=s("p",null,"📌 总结一下",-1)),s("table",b,[i[18]||(i[18]=s("thead",null,[s("tr",null,[s("th",null,"用法"),s("th",null,"是否“绑定”"),s("th",null,"说明")])],-1)),s("tbody",null,[s("tr",null,[s("td",null,[s("code",null,'<my-component max="'+t(n.value)+'" />',1)]),i[14]||(i[14]=s("td",null,"✅ 是绑定",-1)),i[15]||(i[15]=s("td",null,"max 属性受父组件数据控制，组件内部不能直接改",-1))]),i[16]||(i[16]=s("tr",null,[s("td",null,[s("code",null,'<my-component max="5" />')]),s("td",null,"❌ 非绑定"),s("td",null,"max 是字符串形式字面量，可以在组件内部用 setData 修改")],-1)),i[17]||(i[17]=s("tr",null,[s("td",null,[s("code",null,"<my-component />")]),s("td",null,"❌ 非绑定"),s("td",null,"使用默认值，也可以在组件内部修改")],-1))])])]),i[27]||(i[27]=l(`<h2 id="_4-数据监听器" tabindex="-1">4. 数据监听器 <a class="header-anchor" href="#_4-数据监听器" aria-label="Permalink to &quot;4. 数据监听器&quot;">​</a></h2><h3 id="_4-1-概述" tabindex="-1">4.1 概述 <a class="header-anchor" href="#_4-1-概述" aria-label="Permalink to &quot;4.1 概述&quot;">​</a></h3><p>数据监听器用于监听和响应任何属性和数据字段的变化，从而执行特定的操作。它的作用类似于 vue 中的 watch 侦听器。在小程序组件中，数据监听器的基本语法格式如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  observers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;字段A, 字段B&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">字段A的新值</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">字段B的新值</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // do something</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_4-2-基本用法" tabindex="-1">4.2 基本用法 <a class="header-anchor" href="#_4-2-基本用法" aria-label="Permalink to &quot;4.2 基本用法&quot;">​</a></h3><p>组件的 UI 结构如下：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 组件的 UI 结构如下</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{n1}} + {{n2}} = {{sum}}&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mini&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindtap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;addN1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;n1自增&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mini&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindtap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;addN2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;n2自增&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>.js</code>文件代码：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  data: { n1: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n2: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sum: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 数据节点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 方法列表</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addN1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ n1: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.data.n1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addN2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ n2: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.data.n2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  observers: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 数据监听节点</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;n1, n2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 监听 n1 和 n2 数据的变化</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ sum: n1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n2 }) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过监听器,自动计算 sum 的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="_4-3-监听对象属性的变化" tabindex="-1">4.3 监听对象属性的变化 <a class="header-anchor" href="#_4-3-监听对象属性的变化" aria-label="Permalink to &quot;4.3 监听对象属性的变化&quot;">​</a></h3><p>数据监听器支持监听对象中单个或多个属性的变化：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  observers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;对象.属性A, 对象.属性B&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">属性A的新值</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">属性B的新值</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 触发此监听器的 3 种情况:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 【为属性A赋值】使用 setData 设置 this.data.对象.属性A 时触发</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 【为属性B赋值】使用 setData 设置 this.data.对象.属性B 时触发</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 【直接为对象赋值】使用 setData 设置 this.data.对象 时触发</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // do something...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="_4-3-1-纯数据字段" tabindex="-1">4.3.1 纯数据字段 <a class="header-anchor" href="#_4-3-1-纯数据字段" aria-label="Permalink to &quot;4.3.1 纯数据字段&quot;">​</a></h4><p>概念：纯数据字段 指的是那些不用于界面渲染的 data 字段 。</p><p>应用场景：例如有些情况下，某些<code>data</code>中的字段 既不会展示在界面上，也不会传递给其他组件，仅仅在当前组件内部使用。带有这种特性的 data 字段适合被设置为纯数据字段。</p><p>好处：纯数据字段有助于提升页面更新的性能 。</p><p>在 Component 构造器的 options 节点中，指定 pureDataPattern 为一个 正则表达式 ，字段名符合这个正则表达式的字段将成为纯数据字段，示例代码如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  options: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 指定所有 _ 开头的数据字段为纯数据字段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pureDataPattern:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">_</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 普通数据字段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 纯数据字段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="_5-组件的生命周期" tabindex="-1">5. 组件的生命周期 <a class="header-anchor" href="#_5-组件的生命周期" aria-label="Permalink to &quot;5. 组件的生命周期&quot;">​</a></h2><h3 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h3><p>小程序组件可用的全部生命周期如下表所示：</p><table tabindex="0"><thead><tr><th style="text-align:center;">生命周期阶段</th><th style="text-align:center;">函数名</th><th style="text-align:center;">触发时机</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>初始化阶段</strong></td><td style="text-align:center;"><code>created</code></td><td style="text-align:center;">组件实例刚被创建，但还未完成数据观测、属性和方法的运算，以及 <code>$el</code> 的渲染</td><td style="text-align:center;">此时无法获取节点信息（如 <code>this.selectComponent</code> 不可用）</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>attached</code></td><td style="text-align:center;">组件实例进入页面节点树后</td><td style="text-align:center;">可以访问节点信息（如 <code>this.selectComponent</code>），适合进行初始化操作</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>ready</code></td><td style="text-align:center;">组件布局完成，可获取节点信息</td><td style="text-align:center;">此时组件已完成所有渲染，适合依赖布局的操作（如获取节点尺寸）</td></tr><tr><td style="text-align:center;"><strong>更新阶段</strong></td><td style="text-align:center;"><code>moved</code></td><td style="text-align:center;">组件实例被移动到另一个节点树中</td><td style="text-align:center;">适用于跨页面或动态插入组件的场景</td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"><code>detached</code></td><td style="text-align:center;">组件实例从页面节点树移除</td><td style="text-align:center;">适合清理定时器、事件监听等资源</td></tr><tr><td style="text-align:center;"><strong>数据更新</strong></td><td style="text-align:center;"><code>observer</code>（通过 <code>observers</code> 定义）</td><td style="text-align:center;">监听的数据字段变化时触发</td><td style="text-align:center;">需在 <code>observers</code> 中声明，支持监听多个字段或对象属性</td></tr><tr><td style="text-align:center;"><strong>错误处理</strong></td><td style="text-align:center;"><code>error</code></td><td style="text-align:center;">组件方法抛出错误时触发</td><td style="text-align:center;">可用于全局错误捕获</td></tr></tbody></table><p>最重要的生命周期函数有3 个，分别是 created 、attached 、detached，它们各自的特点如下：</p><p>① 组件实例 刚被创建好 的时候，created 生命周期函数会被触发</p><ul><li>此时还不能调用 setData</li><li>通常在这个生命周期函数中，只应该用于给组件的 this 添加一些自定义的属性字段</li></ul><p>② 在组件 完全初始化完毕、进入页面节点树后 ， attached 生命周期函数会被触发</p><ul><li>此时，this.data 已被初始化完毕</li><li>这个生命周期很有用，绝大多数初始化的工作可以在这个时机进行（例如发请求获取初始数据）</li></ul><p>③ 在组件 离开页面节点树后， detached 生命周期函数会被触发</p><ul><li>退出一个页面时，会触发页面内每个自定义组件的 detached 生命周期函数</li><li>此时适合做一些清理性质的工作</li></ul><h3 id="lifetimes-节点" tabindex="-1">lifetimes 节点 <a class="header-anchor" href="#lifetimes-节点" aria-label="Permalink to &quot;lifetimes 节点&quot;">​</a></h3><p>在小程序组件中，生命周期函数可以直接定义在 Component 构造器的第一级参数中，可以在 lifetimes 字段 内进行声明（ 这是推荐的方式，其优先级最高 ）：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 推荐用法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  lifetimes: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    attached</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在组件实例进入页面节点树时执行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    detached</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在组件实例被从页面节点树移除时执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 以下是旧式的定义方式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  attached</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在组件实例进入页面节点树时执行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  detached</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在组件实例被从页面节点树移除时执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="_6-组件所在页面的生命周期" tabindex="-1">6. 组件所在页面的生命周期 <a class="header-anchor" href="#_6-组件所在页面的生命周期" aria-label="Permalink to &quot;6. 组件所在页面的生命周期&quot;">​</a></h2><p>有时， 自定义组件的行为依赖于页面状态的变化 ，此时就需要用到 组件所在页面的生命周期 。</p><p>例如：每当触发页面的 show 生命周期函数的时候，我们希望能够重新生成一个随机的 RGB 颜色值。</p><p>在自定义组件中，组件所在页面的生命周期函数有如下3个：</p><table tabindex="0"><thead><tr><th>页面生命周期</th><th>页面中写法</th><th>组件中写法（不加 <code>on</code>）</th></tr></thead><tbody><tr><td>页面显示</td><td><code>onShow()</code></td><td><code>pageLifetimes: { show() {} }</code></td></tr><tr><td>页面隐藏</td><td><code>onHide()</code></td><td><code>pageLifetimes: { hide() {} }</code></td></tr><tr><td>页面卸载</td><td><code>onUnload()</code></td><td><code>pageLifetimes: { unload() {} }</code></td></tr></tbody></table><p>组件所在页面的生命周期函数，需要定义在（组件文件的）pageLifetimes 节点中，示例代码如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pagelifetimes: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 页面被展示</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    hide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 页面被隐藏</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    resize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 页面尺寸变化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="案例-生成随机的-rgb-色值" tabindex="-1">案例：生成随机的 rgb 色值 <a class="header-anchor" href="#案例-生成随机的-rgb-色值" aria-label="Permalink to &quot;案例：生成随机的 rgb 色值&quot;">​</a></h3><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 生成随机 RGB 颜色的方法。非事件处理函数建议以 _ 开头</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    _randomColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 为 data 里面的 _rgb 纯数据字段重新赋值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        _rgb: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          r: Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          g: Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          b: Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pageLifetimes: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 组件所在的页面被展示时,立即调用 _randomColor 生成随机颜色值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_randomColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="_7-插槽" tabindex="-1">7. 插槽 <a class="header-anchor" href="#_7-插槽" aria-label="Permalink to &quot;7. 插槽&quot;">​</a></h2><p>在自定义组件的 wxml 结构中，可以提供一个 <code>&lt;slot&gt;</code> 节点（插槽），用于承载组件使用者提供的 wxml 结构 。</p><figure><img src="`+d+`" alt=""><figcaption>image-20250727172831055</figcaption></figure><h3 id="单个插槽" tabindex="-1">单个插槽 <a class="header-anchor" href="#单个插槽" aria-label="Permalink to &quot;单个插槽&quot;">​</a></h3><p>在小程序中，默认每个自定义组件中只允许使用一个<code>&lt;slot&gt;</code> 进行占位，这种个数上的限制叫做单个插槽。</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 组件的封装者 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;wrapper&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;这里是组件的内部节点&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- 对于不确定的内容, 可以使用 &lt;slot&gt; 进行占位, 具体的内容由组件的使用者决定 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 组件的使用者 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">component-tag-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- 这部分内容将被放置在组件 &lt;slot&gt; 的位置上 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;这里是插入到组件slot中的内容&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">component-tag-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="启用多个插槽" tabindex="-1">启用多个插槽 <a class="header-anchor" href="#启用多个插槽" aria-label="Permalink to &quot;启用多个插槽&quot;">​</a></h3><p>在小程序的自定义组件中，需要使用多<code>&lt;slot&gt;</code>插槽时，可以在组件的 .js 文件中，通过如下方式进行启用:</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  options: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    multipleSlots: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 在组件定义时的选项中启用多 slot 支持</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  properties: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="定义多个插槽" tabindex="-1">定义多个插槽 <a class="header-anchor" href="#定义多个插槽" aria-label="Permalink to &quot;定义多个插槽&quot;">​</a></h3><p>可以在组件的 .wxml 中使用多个<code>&lt;slot&gt;</code>标签，以不同的 name 来区分不同的插槽：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 组件模板 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;wrapper&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- name 为 before 的第一个 slot 插槽 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">slot</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;before&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;这是一段固定的文本内容&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- name 为 after 的第二个 slot 插槽 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">slot</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;after&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="使用多个插槽" tabindex="-1">使用多个插槽 <a class="header-anchor" href="#使用多个插槽" aria-label="Permalink to &quot;使用多个插槽&quot;">​</a></h3><p>在页面中使用时，需要用 slot 属性来将节点插入到不同的 <code>&lt;slot&gt;</code> 中：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 引用组件的页面模板 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">component-tag-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- 这部分内容将被放置在组件 &lt;slot name=&quot;before&quot;&gt; 的位置上 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;before&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;这里是插入到组件slot name=&quot;before&quot;中的内容&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- 这部分内容将被放置在组件 &lt;slot name=&quot;after&quot;&gt; 的位置上 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> slot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;after&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;这里是插入到组件slot name=&quot;after&quot;中的内容&lt;/</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">component-tag-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_8-父子通信" tabindex="-1">8. 父子通信 <a class="header-anchor" href="#_8-父子通信" aria-label="Permalink to &quot;8. 父子通信&quot;">​</a></h2><h3 id="三种通信方式" tabindex="-1">三种通信方式 <a class="header-anchor" href="#三种通信方式" aria-label="Permalink to &quot;三种通信方式&quot;">​</a></h3><p>① 属性绑定</p><ul><li>用于父组件向子组件的指定属性设置数据，仅能设置 JSON 兼容的数据</li></ul><p>② 事件绑定</p><ul><li>用于子组件向父组件传递数据，可以传递任意数据</li></ul><p>③ 获取组件实例</p><ul><li>父组件还可以通过 this.selectComponent() 获取子组件实例对象</li><li>这样就可以直接访问子组件的任意数据和方法</li></ul><h3 id="属性绑定" tabindex="-1">属性绑定 <a class="header-anchor" href="#属性绑定" aria-label="Permalink to &quot;属性绑定&quot;">​</a></h3><p>属性绑定用于实现父向子传值，而且只能传递普通类型的数据，无法将方法传递给子组件。父组件的示例代码如下：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 父组件的 data 节点</span></span>
<span class="line"><span>data: {</span></span>
<span class="line"><span>    count: 0</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 父组件的 wxml 结构</span></span>
<span class="line"><span>&lt;my-test3 count=&quot;{{count}}&quot;&gt;&lt;/my-test3&gt;</span></span>
<span class="line"><span>&lt;view&gt;-----&lt;/view&gt;</span></span>
<span class="line"><span>&lt;view&gt;父组件中的count值为: {{count}}&lt;/view&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>子组件在 properties 节点中 声明对应的属性并使用 。示例代码如下：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1 // 子组件的 properties 节点</span></span>
<span class="line"><span>2 properties: {</span></span>
<span class="line"><span>3   count: Number</span></span>
<span class="line"><span>4 }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>5 // 子组件的 wxml 结构</span></span>
<span class="line"><span>6 &lt;text&gt;子组件中，count值为：{{count}}&lt;/text&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="事件绑定" tabindex="-1">事件绑定 <a class="header-anchor" href="#事件绑定" aria-label="Permalink to &quot;事件绑定&quot;">​</a></h3><p>事件绑定用于实现子向父传值 ，可以传递任何类型的数据：</p><p>① 在父组件的 js 中，定义一个函数，这个函数即将通过自定义事件的形式，传递给子组件</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在父组件中定义 syncCount 方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将来,这个方法会被传递给子组件,供子组件进行调用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">syncCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;syncCount&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>② 在父组件的 wxml 中，通过自定义事件的形式，将步骤 1 中定义的函数引用，传递给子组件</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 使用 bind:自定义事件名称 (推荐: 结构清晰) --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-test3</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{count}}&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bind:sync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;syncCount&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-test3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 或在 bind 后面直接写上自定义事件名称 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-test3</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{count}}&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;syncCount&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-test3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>③ 在子组件的 js 中，通过调用 <code> this.triggerEvent( triggerEvent(&#39;自定义事件名称 &#39;, { /* 参数对象 */ })</code>，将数据发送到父组件</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 子组件的 wxml 结构</span></span>
<span class="line"><span>&lt;text&gt;子组件中, count值为: {{count}}&lt;/text&gt;</span></span>
<span class="line"><span>&lt;button type=&quot;primary&quot; bindtap=&quot;addCount&quot;&gt;+1&lt;/button&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 子组件的 js 代码</span></span>
<span class="line"><span>methods: {</span></span>
<span class="line"><span>    addCount() {</span></span>
<span class="line"><span>        this.setData({</span></span>
<span class="line"><span>            count: this.properties.count + 1</span></span>
<span class="line"><span>        })</span></span>
<span class="line"><span>        this.triggerEvent(&#39;sync&#39;, {value: this.properties.count})</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>④ 在父组件的 js 中，通过 e.detail 获取到子组件传递过来的数据</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">syncCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // console.log(e.detail.value)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  count: e.detail.value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="获取组件实例" tabindex="-1">获取组件实例 <a class="header-anchor" href="#获取组件实例" aria-label="Permalink to &quot;获取组件实例&quot;">​</a></h3><p>可以在父组件里调用 this.selectComponent()获取子组件的实例对象，从而直接访问子组件的任意数据和方法，调用时需要传入一个选择器，可以是id选择器或类选择器：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// wxxml 结构</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-test3</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{count}}&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bind:sync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;syncCount&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;customA&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">my-test3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bindtap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;getChild&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;获取子组件实例&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 按钮的 tap 事件处理函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 切记下面参数不能传递标签选择器 &#39;my-test3&#39;, 不然返回的是 null</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> child</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">selectComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.customA&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 也可以传递 id 选择器 #cA</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  child.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ count: child.properties.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调用子组件的 setData 方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  child.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调用子组件的 addCount 方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><details class="details custom-block"><summary>如果存在多个子组件</summary><p>❓ <strong>如果存在多个子组件，<code>selectComponent</code> 会怎样？</strong></p><blockquote><p><strong>不会返回多个，只返回第一个匹配的组件实例。</strong></p></blockquote><p>🧩 详细说明如下：</p><table tabindex="0"><thead><tr><th>方法</th><th>返回值</th><th>是否返回多个</th><th>用法说明</th></tr></thead><tbody><tr><td><code>this.selectComponent(selector)</code></td><td><strong>返回单个组件实例（第一个匹配的）</strong></td><td>❌ 只返回一个</td><td>适用于你只需要操作某一个特定子组件时</td></tr><tr><td><code>this.selectAllComponents(selector)</code></td><td><strong>返回组件实例数组</strong></td><td>✅ 会返回所有匹配的组件</td><td>用于需要同时操作多个同类型子组件的场景</td></tr></tbody></table></details><h2 id="_9-behaviors" tabindex="-1">9. behaviors <a class="header-anchor" href="#_9-behaviors" aria-label="Permalink to &quot;9. behaviors&quot;">​</a></h2><p>behaviors是小程序中用于实现组件间代码共享 的特性，类似于 Vue.js 中的 “mixins”。</p><figure><img src="`+E+`" alt=""><figcaption>image-20250728192556210</figcaption></figure><h3 id="behaviors-的工作方式" tabindex="-1">behaviors 的工作方式 <a class="header-anchor" href="#behaviors-的工作方式" aria-label="Permalink to &quot;behaviors 的工作方式&quot;">​</a></h3><p>每个 behavior 可以包含一组 属性、数据、生命周期函数和方法。组件引用它时，它的属性、数据和方法会被合并到组件中。</p><p>每个组件可以引用多behaviorbehavior，behavior 也可以引用其它 behavior。</p><h3 id="创建-behavior" tabindex="-1">创建 behavior <a class="header-anchor" href="#创建-behavior" aria-label="Permalink to &quot;创建 behavior&quot;">​</a></h3><p>调用 Behavior(Object object object)方法即可创建一个共享的behavior 实例对象，供所有的组件使用：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 调用 Behavior() 方法, 创建实例对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 并使用 module.exports 将 behavior 实例对象共享出去</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Behavior</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 属性节点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  properties: {},</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 私有数据节点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  data: { username: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;zs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 事件处理函数和自定义方法节点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {},</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 其它节点...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="导入并使用-behavios" tabindex="-1">导入并使用 behavios <a class="header-anchor" href="#导入并使用-behavios" aria-label="Permalink to &quot;导入并使用 behavios&quot;">​</a></h3><p>在组件中，使用 require() 方法导入需要的 behavior，挂载后即可访问 behavior 中的数据或方法：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// my-component.js</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. 使用 require() 导入需要的自定义 behavior 模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myBehavior</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../../behaviors/my-behavior&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 2. 将导入的 behavior 实例对象,挂载到 behaviors 数组节点中,即可生效</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  behaviors: [myBehavior],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 组件的其它节点...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="behavior-中所有可用的节点" tabindex="-1">behavior 中所有可用的节点 <a class="header-anchor" href="#behavior-中所有可用的节点" aria-label="Permalink to &quot;behavior 中所有可用的节点&quot;">​</a></h3><table tabindex="0"><thead><tr><th>字段名</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><strong>🔴 properties</strong></td><td><code>Object</code></td><td><strong>组件的属性定义，可设置默认值、类型和监听器 observer。</strong></td></tr><tr><td><strong>🔴 data</strong></td><td><code>Object</code></td><td><strong>组件的内部状态数据，可通过 <code>this.setData()</code> 更新。</strong></td></tr><tr><td><strong>🔴 methods</strong></td><td><code>Object</code></td><td><strong>组件的方法定义，可供页面或其他组件调用。</strong></td></tr><tr><td><strong>🔴 lifetimes</strong></td><td><code>Object</code></td><td><strong>组件生命周期钩子，如 <code>created</code>、<code>attached</code>、<code>detached</code>。</strong></td></tr><tr><td>🔵 observers</td><td><code>Object</code></td><td>数据字段监听器，监听 <code>properties</code> 或 <code>data</code> 的组合变化。</td></tr><tr><td>🔵 pageLifetimes</td><td><code>Object</code></td><td>监听页面的生命周期（例如 <code>show</code>、<code>hide</code>）。</td></tr><tr><td>🔵 behaviors</td><td><code>Array&lt;Behavior&gt;</code></td><td>引用其他 behavior，实现多重继承。</td></tr><tr><td>🔵 externalClasses</td><td><code>string[]</code></td><td>允许组件接收外部样式类名，便于自定义样式。</td></tr><tr><td>🔵 relations</td><td><code>Object</code></td><td>定义组件之间的关系（如父子、祖孙）。</td></tr><tr><td>🔵 definitionFilter</td><td><code>Function</code></td><td>在 behavior 被定义时调用，可修改 definition 配置。</td></tr></tbody></table><h3 id="同名字段的覆盖和组合规则" tabindex="-1">同名字段的覆盖和组合规则 <a class="header-anchor" href="#同名字段的覆盖和组合规则" aria-label="Permalink to &quot;同名字段的覆盖和组合规则&quot;">​</a></h3><p>组件和它引用的 behavior 中可以包含同名的字段，此时可以参考如下 3 种同名时的处理规则：</p><p>① 同名的数据字段 (datadata)</p><p>② 同名的属性 (propertiesproperties) 或方法 (methodsmethods)</p><p>③ 同名的 生命周期函数</p><h3 id="同名字段的覆盖规则" tabindex="-1">同名字段的覆盖规则 <a class="header-anchor" href="#同名字段的覆盖规则" aria-label="Permalink to &quot;同名字段的覆盖规则&quot;">​</a></h3><details class="details custom-block"><summary>点击查看详情</summary><p>组件和它引用的 <code>behavior</code> 中可以包含同名的字段，对这些字段的处理方法如下：</p><ul><li>如果有同名的属性 (properties) 或方法 (methods)： <ol><li>若组件本身有这个属性或方法，则组件的属性或方法会覆盖 <code>behavior</code> 中的同名属性或方法；</li><li>若组件本身无这个属性或方法，则在组件的 <code>behaviors</code> 字段中定义靠后的 <code>behavior</code> 的属性或方法会覆盖靠前的同名属性或方法；</li><li>在 2 的基础上，若存在嵌套引用 <code>behavior</code> 的情况，则规则为：<code>引用者 behavior</code> 覆盖 <code>被引用的 behavior</code> 中的同名属性或方法。</li></ol></li><li>如果有同名的数据字段 (data)： <ul><li>若同名的数据字段都是对象类型，会进行对象合并；</li><li>其余情况会进行数据覆盖，覆盖规则为： <code>引用者 behavior</code> &gt; <code>被引用的 behavior</code> 、 <code>靠后的 behavior</code> &gt; <code>靠前的 behavior</code>。（优先级高的覆盖优先级低的，最大的为优先级最高）</li></ul></li></ul><p>生命周期函数和 observers 不会相互覆盖，而是在对应触发时机被逐个调用：</p><ul><li>对于不同的生命周期函数之间，遵循组件生命周期函数的执行顺序；</li><li>对于同种生命周期函数和同字段 observers ，遵循如下规则： <ul><li><code>behavior</code> 优先于组件执行；</li><li><code>被引用的 behavior</code> 优先于 <code>引用者 behavior</code> 执行；</li><li><code>靠前的 behavior</code> 优先于 <code>靠后的 behavior</code> 执行；</li></ul></li><li>如果同一个 <code>behavior</code> 被一个组件多次引用，它定义的生命周期函数和 observers 不会重复执行。</li></ul></details>`,105))])}const A=e(o,[["render",u]]);export{D as __pageData,A as default};
