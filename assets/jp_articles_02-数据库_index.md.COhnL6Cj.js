import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.BjB3rnhW.js";const y=JSON.parse('{"title":"数据库设计全过程# MySQL表设计经验汇总篇","description":"","frontmatter":{},"headers":[],"relativePath":"jp/articles/02-数据库/index.md","filePath":"jp/articles/02-数据库/index.md","lastUpdated":1752902037000}'),p={name:"jp/articles/02-数据库/index.md"};function h(l,s,k,e,d,r){return t(),a("div",null,[...s[0]||(s[0]=[n('<h1 id="数据库设计全过程-mysql表设计经验汇总篇" tabindex="-1">数据库设计全过程# MySQL表设计经验汇总篇 <a class="header-anchor" href="#数据库设计全过程-mysql表设计经验汇总篇" aria-label="Permalink to &quot;数据库设计全过程# MySQL表设计经验汇总篇&quot;">​</a></h1><p>表设计是每一个后端程序员都无法避开的一块砖，而且这块砖一不小心就很容易烫手，本篇笔记就是为了帮助大家在设计表时能够轻松拿捏。</p><h2 id="_1-命名规范" tabindex="-1">1.命名规范 <a class="header-anchor" href="#_1-命名规范" aria-label="Permalink to &quot;1.命名规范&quot;">​</a></h2><p>数据库表名、字段名、索引名等都需要命名规范。命名可读性要高，尽量使用英文，采用驼峰或者下划线分割的方式，让人见名知意。</p><p>反例：这些命名过于简单，缺乏描述性，很难让人理解它的含义。</p><p>1表名：a、b、c 2字段名：aaa、bbb、ccc 3索引名：index1、index2、index3</p><p>正例：这些命名就让人见名知意。</p><p>1表名：customers、orders、products 2字段名：customer_id、order_date、product_name 3索引名：idx_customer_id、idx_order_date</p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><p>●表名、字段名必须使用小写字母，禁止使用数字开头，禁止使用拼音，并且一般不使用英文缩写。</p><p>●主键索引名为pk_字段名；唯一索引名为uk_字段名；普通索引名则为idx_字段名。</p></div><h2 id="_2-选择合适的字段类型" tabindex="-1">2.选择合适的字段类型 <a class="header-anchor" href="#_2-选择合适的字段类型" aria-label="Permalink to &quot;2.选择合适的字段类型&quot;">​</a></h2><p>设计表时，需要选择合适字段类型：</p><hr><details class="details custom-block"><summary>MySQL 8.0 字段类型速查表（常用）</summary><table tabindex="0"><thead><tr><th>类型分类</th><th>类型名称</th><th>占用空间</th><th>说明</th></tr></thead><tbody><tr><td>整数类型</td><td>TINYINT</td><td>1 字节</td><td>-128 ~ 127（有符号） / 0 ~ 255（无符号）</td></tr><tr><td></td><td>SMALLINT</td><td>2 字节</td><td>-32,768 ~ 32,767</td></tr><tr><td></td><td>MEDIUMINT</td><td>3 字节</td><td>-8,388,608 ~ 8,388,607</td></tr><tr><td></td><td>INT / INTEGER</td><td>4 字节</td><td>-2,147,483,648 ~ 2,147,483,647</td></tr><tr><td></td><td>BIGINT</td><td>8 字节</td><td>±9.2×10¹⁸（64位）</td></tr><tr><td>小数类型</td><td>DECIMAL(M,D)</td><td>依赖精度</td><td>精确小数，适合用于金钱等场景（不受浮点误差）</td></tr><tr><td></td><td>FLOAT</td><td>4 字节</td><td>单精度浮点（约 7 位精度）</td></tr><tr><td></td><td>DOUBLE</td><td>8 字节</td><td>双精度浮点（约 16 位精度）</td></tr><tr><td>字符串类型</td><td>CHAR(n)</td><td>n 字节</td><td>定长字符串，最多 255 个字符（不建议用于变长数据）</td></tr><tr><td></td><td>VARCHAR(n)</td><td>n+1 ~ n+2 字节</td><td>变长字符串，最大 65535 字节（受字符集和行宽限制）</td></tr><tr><td></td><td>TEXT</td><td>最大 64KB</td><td>长文本，不适合索引、排序</td></tr><tr><td></td><td>TINYTEXT</td><td>最大 255B</td><td>非常短文本</td></tr><tr><td></td><td>MEDIUMTEXT</td><td>最大 16MB</td><td>中等长度文本</td></tr><tr><td></td><td>LONGTEXT</td><td>最大 4GB</td><td>超长文本</td></tr><tr><td>日期时间类型</td><td>DATE</td><td>3 字节</td><td>&#39;1000-01-01&#39; 到 &#39;9999-12-31&#39;</td></tr><tr><td></td><td>DATETIME</td><td>8 字节</td><td>&#39;1000-01-01 00:00:00&#39; ~ &#39;9999-12-31 23:59:59&#39;</td></tr><tr><td></td><td>TIMESTAMP</td><td>4 字节</td><td>从 1970 到 2038（受限于 UNIX 时间戳）</td></tr><tr><td></td><td>TIME</td><td>3 字节</td><td>&#39;−838:59:59&#39; 到 &#39;838:59:59&#39;</td></tr><tr><td></td><td>YEAR</td><td>1 字节</td><td>表示年份，如 2024</td></tr><tr><td>JSON 类型</td><td>JSON</td><td>动态</td><td>存储结构化 JSON 数据，支持索引部分字段</td></tr><tr><td>布尔类型</td><td>BOOLEAN / BOOL</td><td>1 字节</td><td>实际为 TINYINT(1)，0 为假，非 0 为真</td></tr><tr><td>二进制类型</td><td>BINARY(n)</td><td>定长</td><td>固定长度的二进制数据</td></tr><tr><td></td><td>VARBINARY(n)</td><td>变长</td><td>可变长度的二进制数据</td></tr><tr><td></td><td>BLOB 系列</td><td>TINYBLOB ~ LONGBLOB</td><td>与 TEXT 系列对应，用于存储二进制大对象</td></tr></tbody></table></details><hr><h3 id="📝-注意事项-mysql-8-0-以后" tabindex="-1">📝 注意事项（MySQL 8.0 以后）： <a class="header-anchor" href="#📝-注意事项-mysql-8-0-以后" aria-label="Permalink to &quot;📝 注意事项（MySQL 8.0 以后）：&quot;">​</a></h3><ul><li>✅ 整数类型中的 <code>INT(11)</code> 等「显示宽度」写法已<strong>被弃用</strong></li><li>✅ 推荐使用 <code>UNSIGNED</code>（无符号）提高正整数主键范围</li><li>✅ <code>JSON</code> 类型可以用作结构化字段，但不要滥用（查询复杂度高）</li><li>✅ <code>TEXT/BLOB</code> 类型不支持默认值，且无法参与 FULLTEXT 索引（除特殊配置）</li></ul><h2 id="_3-主键设计要合理" tabindex="-1">3. 主键设计要合理 <a class="header-anchor" href="#_3-主键设计要合理" aria-label="Permalink to &quot;3. 主键设计要合理&quot;">​</a></h2><p>主键的设计在数据库中非常重要，它用于唯一标识表中的每一行数据，并且在数据操作和查询中起到关键作用。通常主键的设计，不要与业务相关联，因为业务是会发生变化的，应当使用自增的 id，并且保持主键的连续性。比如说可以使用优化的雪花 id 等等。</p><h2 id="_4-选择合适的字段长度" tabindex="-1">4.选择合适的字段长度 <a class="header-anchor" href="#_4-选择合适的字段长度" aria-label="Permalink to &quot;4.选择合适的字段长度&quot;">​</a></h2><p>首先问大家一个问题，数据库字段长度表示字符长度还是字节长度？</p><p>在mysql中，varchar和char类型表示字符长度，而其他类型表示的长度都表示字节长度。</p><p>char(10)表示字符长度是10。</p><div class="danger custom-block"><p class="custom-block-title">注意!!</p><p>从 <strong>MySQL 8.0 开始</strong>，所有整型类型的<strong>显示宽度语法（如 INT(11), BIGINT(4)）都被废弃</strong>了</p><p>以后写表结构时，直接写：<code>BIGINT</code> 或 <code>BIGINT UNSIGNED</code> 即可</p><p>不要使用 <code>(4)</code>、<code>(11)</code> 等旧的显示宽度写法（容易误解 + 已废弃）</p></div><p>所以在设计表时需要充分考虑一个字段的长度，比如一个用户名字段（它的长度5~20个字符），你觉得应该设置多长呢？可以考虑设置为 varchar（32）。需要注意字段长度一般设置为2的n次方。</p><h2 id="_5-优先考虑逻辑删除-而不是物理删除" tabindex="-1">5.优先考虑逻辑删除，而不是物理删除 <a class="header-anchor" href="#_5-优先考虑逻辑删除-而不是物理删除" aria-label="Permalink to &quot;5.优先考虑逻辑删除，而不是物理删除&quot;">​</a></h2><p>什么是物理删除？什么是逻辑删除？</p><p>●物理删除：把数据从硬盘中删除，可释放存储空间</p><p>●逻辑删除：给数据添加一个字段，比如is_deleted，以标记该数据已经逻辑删除。</p><p>为什么推荐用逻辑删除，不推荐物理删除呢？</p><p>●数据恢复困难。</p><p>●物理删除会导致索引树重构</p><h2 id="_6-每个表都需要添加通用字段" tabindex="-1">6.每个表都需要添加通用字段 <a class="header-anchor" href="#_6-每个表都需要添加通用字段" aria-label="Permalink to &quot;6.每个表都需要添加通用字段&quot;">​</a></h2><p>●id： 主键，一个表必须得有主键，必须</p><p>●create_time： 创建时间</p><p>●creator ：创建人</p><p>●update_time: 修改时间，必须，更新记录时，需要更新它</p><p>●update_by :修改人，非必须</p><p>●remark ：数据记录备注，非必须</p><h2 id="_7-一张表的字段不宜过多" tabindex="-1">7.一张表的字段不宜过多 <a class="header-anchor" href="#_7-一张表的字段不宜过多" aria-label="Permalink to &quot;7.一张表的字段不宜过多&quot;">​</a></h2><p>建表的时候一张表的字段不要太多了。尽量不超过 20 个。超出的话优先考虑拆分，也就是通常的查询表，详情表。</p><p>●查询效率：当表中保存的数据数量很大时，查询操作需要检索的数据也会随之增加。如果表的字段数过多，查询操作就需要读取更多的数据，这会导致查询效率变慢。</p><p>●存储空间：表的字段数越多，每一行数据占用的存储空间也就越大。对于大型数据库来说，这可能会导致磁盘空间的浪费。</p><p>●数据库设计复杂性：当表的字段数过多时，数据库的设计和维护变得更加复杂。这可能涉及到索引和关联表的设计，以确保数据的完整性和一致性。</p><h2 id="_8-定义字段尽可能not-null" tabindex="-1">8.定义字段尽可能not null <a class="header-anchor" href="#_8-定义字段尽可能not-null" aria-label="Permalink to &quot;8.定义字段尽可能not null&quot;">​</a></h2><p>如果没有特殊的理由， 一般都建议将字段定义为 NOT NULL 。为什么呢？</p><p>●首先，NOT NULL 可以防止出现空指针问题。</p><p>●其次，NULL值存储也需要额外的空间的，它也会导致比较运算更为复杂，使优化器难以优化SQL。</p><p>●NULL值有可能会导致索引失效</p><p>如果将字段默认设置成一个空字符串或常量值并没有什么不同，且都不会影响到应用逻辑， 那就可以将这个字段设置为NOT NULL。</p><h2 id="_9-合理添加索引" tabindex="-1">9.合理添加索引 <a class="header-anchor" href="#_9-合理添加索引" aria-label="Permalink to &quot;9.合理添加索引&quot;">​</a></h2><p>当设计表时，需要考虑哪些字段需要加索引，可以遵循以下几个原则：</p><p>●根据查询条件进行选择（高频使用）：如果在查询中使用了某个字段作为查询条件，那么这个字段就应该建立索引。例如，在用户表中，如果需要根据用户的姓名进行查询，那么就应该为姓名字段建立索引。</p><p>●区分度高的字段优先：如果一个字段的取值范围非常小，例如性别只有男女两种可能，那么这个字段就不适合建立索引。相反，如果一个字段的取值范围很大且区分度高，例如用户ID，那么这个字段就非常适合建立索引。</p><p>●不要建立过多的索引：每个表所建立的索引数量应该控制在一个合理的范围内，一般不要超过5个。因为过多的索引会导致写入速度变慢，并占用更多的存储空间。</p><p>●联合索引优化：在某些情况下，可以通过联合索引的方式来优化查询速度，减少所需的索引数量。例如，在用户表中，如果需要根据用户姓名和年龄进行查询，那么可以将这两个字段组合成联合索引。</p><p>假设你有一个订单表，包含订单ID、用户ID、订单金额、订单状态等字段。现在需要根据用户ID和订单状态进行查询，可以考虑为用户ID和订单状态这两个字段建立联合索引，例如：</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> order_tab</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AUTO_INCREMENT,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    user_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    amount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">decimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    create_time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">datetime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (id),</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> idx_user_status (user_id, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">USING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BTREE</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ENGINE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">InnoDB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CHARSET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">utf8;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="_10-不需要严格遵守-3nf-通过业务字段冗余来减少表关联" tabindex="-1">10.不需要严格遵守 3NF，通过业务字段冗余来减少表关联 <a class="header-anchor" href="#_10-不需要严格遵守-3nf-通过业务字段冗余来减少表关联" aria-label="Permalink to &quot;10.不需要严格遵守 3NF，通过业务字段冗余来减少表关联&quot;">​</a></h2><p>简单来说就是反范式设计。常见形式是在第三范式(3NF)的基础上，进一步进行冗余，从而减少表关联。</p><p>回顾下什么是数据库三范式（3NF）？</p><p>●第一范式：对属性的原子性，要求属性具有原子性，不可再分解；</p><p>●第二范式：对记录的唯一性，要求记录有唯一标识，即实体的唯一性，即不存在部分依赖；</p><p>●第三方式：对字段的冗余性，要求任何字段不能由其他字段派生出来，它要求字段没有冗余，即不存在传递依赖；</p><p>假设需要设计一个产品订单表，包含以下字段：订单ID、用户ID、订单日期、产品名称、产品价格、产品数量以及订单总价。正常情况下，可能会分别设计订单表和产品表，并使用外键进行关联，例如：</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> order</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    `id`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AUTO_INCREMENT,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`user_id`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`order_date`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`product_id`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`quantity`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`id`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FOREIGN KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`product_id`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">REFERENCES</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `product`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`id`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ENGINE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">InnoDB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CHARSET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">utf8;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> product</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    `id`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AUTO_INCREMENT,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`name`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`price`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> decimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`id`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ENGINE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">InnoDB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CHARSET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">utf8;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>这个设计方式符合范式要求，但在查询时需要进行表关联操作，可能会降低查询效率。为了提高查询效率，我们可以使用反范式的设计方式，将订单表中的产品名称、产品价格和订单总价冗余存储到订单表中，从而避免关联查询。例如：</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> order</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    `id`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AUTO_INCREMENT,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`user_id`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`order_date`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`product_name`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`product_price`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> decimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`quantity`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`total_price`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> decimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`id`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ENGINE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">InnoDB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CHARSET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">utf8;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>通过这种反范式的设计方式，我们可以避免表关联操作，提高查询效率。但同时也带来了一些缺点，例如数据冗余、数据更新困难等。因此，在实际应用中需要根据具体情况进行选择。</p><ol start="11"><li><h2 id="避免使用mysql保留字" tabindex="-1">避免使用MySQL保留字 <a class="header-anchor" href="#避免使用mysql保留字" aria-label="Permalink to &quot;避免使用MySQL保留字&quot;">​</a></h2></li></ol><p>如果库名、表名、字段名等属性含有保留字时，SQL语句必须用反引号来引用属性名称，这将使得SQL语句书写、SHELL脚本中变量的转义等变得非常复杂。</p><p>如果你需要使用这些保留字作为表名、列名或其他标识符，你可以考虑以下方法来避免冲突：</p><p>1在标识符前或后添加下划线：例如，将表名命名为 &quot;my_table&quot;，列名命名为 &quot;column_name&quot;。</p><p>2使用不同的单词或短语：例如，将表名命名为 &quot;orders_table&quot;，列名命名为 &quot;order_status&quot;。</p><p>3使用反引号（）将标识符括起来：例如，将表名命名为 &quot;table&quot;，列名命名为 &quot;column`&quot;。请注意，在使用反引号时要小心，确保使用正确的语法和规范</p><h2 id="_12-不搞外键关联-一般都在代码维护" tabindex="-1">12.不搞外键关联，一般都在代码维护 <a class="header-anchor" href="#_12-不搞外键关联-一般都在代码维护" aria-label="Permalink to &quot;12.不搞外键关联，一般都在代码维护&quot;">​</a></h2><p>在数据库设计中，使用外键关联是一种良好的实践，可以确保数据的完整性和一致性。外键关联可以帮助维护表之间的关系，防止无效或不一致的数据插入、更新或删除操作。然而，在某些情况下，也存在一些缺点，这可能是导致现在不太推荐使用外键关联的原因之一。以下是一些这种情况：</p><p>1可能会导致性能问题，尤其是在对大型数据集进行操作时。这是因为每次插入、更新或删除操作都需要进行约束检查，这可能会导致额外的开销和延迟。</p><p>2可能会限制数据库的灵活性和可扩展性。例如，如果需要对数据库进行分区或垂直分割，外键关联可能会导致额外的复杂性和限制。</p><p>3可能会导致死锁和死循环，特别是在进行并发操作时。这可能会导致数据库出现不稳定的状态，从而影响系统的性能和可用性。</p><p>4可能会导致数据库的维护和管理成本的增加。这是因为外键关联需要额外的管理和维护工作，例如添加、修改或删除外键约束时需要额外的测试和验证。</p><p>因此，在决定是否使用外键关联时，需要考虑实际业务需求和场景，并进行权衡和决策。在某些情况下，可以采用其他方法来保证数据的完整性和一致性，例如使用应用程序逻辑或数据库触发器来实现约束检查和数据操作。同时，需要注意数据库设计的基本原则和最佳实践，例如避免数据冗余、遵循规范化原则和正常化理论等。</p><h2 id="_13-字段注释" tabindex="-1">13.字段注释 <a class="header-anchor" href="#_13-字段注释" aria-label="Permalink to &quot;13.字段注释&quot;">​</a></h2><p>设计表时每个字段的含义要注释清楚，包括枚举类型。比如说：</p><h2 id="_14-时间的类型选择" tabindex="-1">14.时间的类型选择 <a class="header-anchor" href="#_14-时间的类型选择" aria-label="Permalink to &quot;14.时间的类型选择&quot;">​</a></h2><p>时间类型的选择一般都要好好考虑，因为不同的类型存储的格式不同。</p><p>对于MySQL来说，主要有date、datetime、time、timestamp 和 year。</p><p>●date ：表示的日期值, 格式yyyy-mm-dd,范围1000-01-01 到 9999-12-31，3字节</p><p>●time ：表示的时间值，格式 hh:mm:ss，范围-838:59:59 到 838:59:59，3字节</p><p>●datetime：表示的日期时间值，格式yyyy-mm-dd hh:mm:ss，范围1000-01-01 00:00:00到9999-12-31 23:59:59```,8字节，跟时区无关</p><p>●timestamp：表示的时间戳值，格式为yyyymmddhhmmss，范围1970-01-01 00:00:01到2038-01-19 03:14:07，4字节，跟时区有关</p><p>●year：年份值，格式为yyyy。范围1901到2155，1字节</p><p>推荐优先使用datetime类型来保存日期和时间，因为存储范围更大，且跟时区无关。</p><h2 id="_15-sql-编写的一些优化经验" tabindex="-1">15.SQL 编写的一些优化经验 <a class="header-anchor" href="#_15-sql-编写的一些优化经验" aria-label="Permalink to &quot;15.SQL 编写的一些优化经验&quot;">​</a></h2><p>1避免使用SELECT * FROM 语句，应该只选择需要的列，以减少网络传输和提高查询性能。</p><p>2使用索引来提高查询速度，特别是在对大型表进行查询时。</p><p>3避免使用外键约束，因为它们可能会导致性能问题，特别是在对大型表进行插入、更新和删除操作时。</p><p>4使用LIMIT 1来限制查询结果只有一条记录。</p><p>5避免在where子句中使用OR来连接条件，应使用UNION来连接查询。</p><p>6注意优化LIMIT深分页问题，可以使用OFFSET来替代LIMIT。</p><p>7使用where条件限制要查询的数据，避免返回多余的行。</p><p>8尽量避免在索引列上使用MySQL的内置函数，这可能导致索引失效。</p><p>9应尽量避免在where子句中对字段进行表达式操作，这可能导致索引失效。</p><p>10应尽量避免在where子句中使用!=或&lt;&gt;操作符，这可能导致索引失效。</p><p>11使用联合索引时，注意索引列的顺序，一般遵循最左匹配原则。</p><p>12对查询进行优化，应考虑在where及order by涉及的列上建立索引。</p><p>13如果插入数据过多，考虑批量插入。</p><p>14在适当的时候，使用覆盖索引。</p><p>15使用EXPLAIN 分析你SQL的计划。</p>',108)])])}const g=i(p,[["render",h]]);export{y as __pageData,g as default};
